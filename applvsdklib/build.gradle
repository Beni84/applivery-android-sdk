apply plugin: 'com.android.library'
apply plugin: 'jacoco-android'
apply from: rootProject.file('gradle/checkstyle.gradle')

def STRING = "String"
def LONG = "long"

android {
  compileSdkVersion parent.ext.androidCompileSdkVersion
  buildToolsVersion parent.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion parent.ext.androidMinSdkVersion
    targetSdkVersion parent.ext.androidTargetSdkVersion
    versionCode parent.ext.androidVersionCode
    versionName parent.ext.androidVersionName

    buildConfigField STRING, "API_URL", '"https://dashboard.applivery.com"'
    buildConfigField LONG, "UPDATE_CHECKING_TIME", '86400000l'
  }

  buildTypes {
    debug {
      buildConfigField STRING, "API_URL", '"http://dashboard.sandbox.applivery.com"'
      testCoverageEnabled true
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      buildConfigField STRING, "API_URL", '"https://dashboard.applivery.com"'
    }
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  sourceSets {
    test {
      resources {
        srcDir "test"
      }
    }
  }

  lintOptions {
    abortOnError false
  }
}

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'
  }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  compile 'com.android.support:appcompat-v7:23.1.1'
  compile 'com.squareup.retrofit2:retrofit:2.0.0'
  compile 'com.squareup.retrofit2:converter-gson:2.0.0'
  compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'
  compile 'com.google.code.gson:gson:2.6.2'

  compile ('com.karumi:dexter:2.2.2'){
    exclude group:'com.android.support', module:'recyclerview-v7'
  }

  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-all:2.0.2-beta'
  testCompile 'com.squareup.okhttp:mockwebserver:2.6.0'
}

/*
 * Copyright (c) 2016 Applivery
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  failOnError  false
  source = android.sourceSets.main.java.sourceFiles
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

apply from: '../maven_push.gradle'
